<random>
Random
This header introduces random number generation facilities.

This library allows to produce random numbers using combinations of generators and distributions:
Generators: Objects that generate uniformly distributed numbers.
Distributions: Objects that transform sequences of numbers generated by a generator into sequences of numbers that follow a specific random variable distribution, such as uniform, Normal or Binomial.

Distribution objects generate random numbers by means of their operator() member, which takes a generator object as argument:
std::default_random_engine generator;
std::uniform_int_distribution<int> distribution(1,6);
int dice_roll = distribution(generator);  // generates number in the range 1..6 


For repeated uses, both can be bound together:
auto dice = std::bind ( distribution, generator );
int wisdom = dice()+dice()+dice();


Except for random_device, all standard generators defined in the library are random number engines, which are a kind of generators that use a particular algorithm 
to generate series of pseudo-random numbers. These algorithms need a seed as a source of randomness, and this seed can either be a single value or an object with a very specific 
generate() member function (see seed_seq for more info). A typical source of randomness for trivial tasks is time, such as the information provided by time or system_clock::now (for a typical example, see uniform_int_distribution::operator()).

As an alternative, trivial random numbers can also be generated using cstdlib's functions rand and srand.

Generators
Pseudo-random number engines (templates)
Generators that use an algorithm to generate pseudo-random numbers based on an initial seed:
linear_congruential_engine
Linear congruential random number engine (class template )
mersenne_twister_engine
Mersenne twister random number engine (class template )
subtract_with_carry_engine
Subtract-with-carry random number engine (class template )

Engine adaptors
They adapt an engine, modifying the way numbers are generated with it:
discard_block_engine
Discard-block random number engine adaptor (class template )
independent_bits_engine
Independent-bits random number engine adaptor (class template )
shuffle_order_engine
Shuffle-order random number engine adaptor (class template )

Pseudo-random number engines (instantiations)
Particular instantiations of generator engines and adaptors:
default_random_engine
Default random engine (class )
minstd_rand
Minimal Standard minstd_rand generator (class )
minstd_rand0
Minimal Standard minstd_rand0 generator (class )
mt19937
Mersenne Twister 19937 generator (class )
mt19937_64
Mersenne Twister 19937 generator (64 bit) (class )
ranlux24_base
Ranlux 24 base generator (class )
ranlux48_base
Ranlux 48 base generator (class )
ranlux24
Ranlux 24 generator (class )
ranlux48
Ranlux 48 generator (class )
knuth_b
Knuth-B generator (class )

Random number generators
Non-deterministic random number generator:
random_device
True random number generator (class )

Distributions
Uniform:
uniform_int_distribution
Uniform discrete distribution (class template )
uniform_real_distribution
Uniform real distribution (class template )

Related to Bernoulli (yes/no) trials:
bernoulli_distribution
Bernoulli distribution (class )
binomial_distribution
Binomial distribution (class template )
geometric_distribution
Geometric distribution (class template )
negative_binomial_distribution
Negative binomial distribution (class template )

Rate-based distributions:
poisson_distribution
Poisson distribution (class template )
exponential_distribution
Exponential distribution (class template )
gamma_distribution
Gamma distribution (class template )
weibull_distribution
Weibull distribution (class template )
extreme_value_distribution
Extreme Value distribution (class template )

Related to Normal distribution:
normal_distribution
Normal distribution (class template )
lognormal_distribution
Lognormal distribution (class template )
chi_squared_distribution
Chi-squared distribution (class template )
cauchy_distribution
Cauchy distribution (class template )
fisher_f_distribution
Fisher F-distribution (class template )
student_t_distribution
Student T-Distribution (class template )

Piecewise distributions:
discrete_distribution
Discrete distribution (class template )
piecewise_constant_distribution
Piecewise constant distribution (class template )
piecewise_linear_distribution
Piecewise linear distribution (class template )




class
<random>
std::default_random_engine
Default random engine
This is a random number engine class that generates pseudo-random numbers.

It is the library implemention's selection of a generator that provides at least acceptable engine behavior for relatively casual, inexpert, and/or lightweight use.

Member types
The following alias is a member type of default_random_engine:

member type	definition			notes
result_type	An unsigned integer type	The type of the numbers generated.

Member functions
In the case that this is a linear_congruential_engine type, it has the following member functions:
(constructor)
Construct linear congruential engine (public member function)
min
Minimum value (public static member function)
max
Maximum value (public static member function)
seed
Seed engine (public member function)
operator()
Generate random number (public member function )
discard
Advance internal state (public member function)

Non-member functions
operator<<
Insert into output stream (function template )
operator>>
Extract from input stream (function template )
relational operators
Relational operators (function template )



class
<random>
std::random_device
class random_device;
True random number generator
A random number generator that produces non-deterministic random numbers, if supported.

Unlike the other standard generators, this is not meant to be an engine that generates pseudo-random numbers, but a generator based on stochastic processes to generate a sequence of uniformly distributed random numbers. Although, certain library implementations may lack the ability to produce such numbers and employ a random number engine to generate pseudo-random values instead. In this case, entropy returns zero.

Notice that random devices may not always be available to produce random numbers (and in some systems, they may even never be available). This is signaled by throwing an exception derived from the standard exception on construction or when a number is requested with operator().

Unless the program really requires a stochastic process to generate random numbers, a portable program is encouraged to use an alternate pseudo-random number generator engine instead, or at least provide a recovery method for such exceptions.

Member types
The following alias is a member type of random_device:

member type	definition	notes
result_type	unsigned int	The type of the numbers generated.

Member functions
(constructor)
Construct random device (public member function)
min
Minimum value (public static member function)
max
Maximum value (public static member function)
operator()
Generate random number (public member function)
entropy
Return entropy (public member function)



class template
<random>
std::linear_congruential_engine
template <class UIntType, UIntType a, UIntType c, UIntType m>
class linear_congruential_engine;
Linear congruential random number engine
A pseudo-random number generator engine that produces unsigned integer numbers.

This is the simplest generator engine in the standard library. Its state is a single integer value, with the following transition algorithm:



Where x is the current state value, a and c are their respective template parameters, and m is its respective template parameter if this is greater than 0, or numerics_limits<UIntType>::max() plus 1, otherwise.

Its generation algorithm is a direct copy of the state value.

This makes it an extremely efficient generator in terms of processing and memory consumption, but producing numbers with varying degrees of serial correlation, depending on the specific parameters used.

The random numbers generated by linear_congruential_engine have a period of m.

Template parameters
UIntType
An unsigned integer type.
Values produced by the engine are of this type.
a
The multiplier parameter (a) used in the transition algorithm.
If m is not zero, this parameter should be lower than m.
c
The increment parameter (c) used in the transition algorithm.
If m is not zero, this parameter should be lower than m.
m
The modulus parameter (m) used in the transition algorithm, except if this parameter is zero.
If this parameter is zero, the value assumed for m on all operations is numerics_limits<UIntType>::max() plus one (even if UIntType cannot represent this value).

Template instantiations
minstd_rand0
Minimal Standard minstd_rand0 generator (class )
minstd_rand
Minimal Standard minstd_rand generator (class )

Member types
The following alias is a member type of list_congruential_engine:

member type	definition	notes
result_type	The first template parameter (UIntType)	The type of the numbers generated.

Member functions
(constructor)
Construct linear congruential engine (public member function)
min
Minimum value (public static member function)
max
Maximum value (public static member function)
seed
Seed engine (public member function)
operator()
Generate random number (public member function )
discard
Advance internal state (public member function)

Non-member functions
operator<<
Insert into output stream (function template )
operator>>
Extract from input stream (function template )
relational operators
Relational operators (function template )